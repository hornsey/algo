" 关闭自动缩进
set pastetoggle=<F9>
" 不要使用vi的键盘模式，而是vim自己的
set nocompatible
" 语法高亮
set syntax=on
"中文帮助
set helplang=cn
"配色方案
"colorscheme torte
" 去掉输入错误的提示声音
set noeb
" 在处理未保存或只读文件的时候，弹出确认
set confirm
" 自动缩进
set autoindent
set cindent
" 自动换行
set wrap
" 整词换行
set linebreak
" Tab键的宽度
set tabstop=4
" 统一缩进为4
set softtabstop=4
set shiftwidth=4
" 不要用空格代替制表符
set noexpandtab
" 在行和段开始处使用制表符
set smarttab
" 显示行号
set number
" 历史记录数
set history=1000
"禁止生成临时文件
set nobackup
set noswapfile
"搜索忽略大小写
set ignorecase
"搜索逐字符高亮
set hlsearch
set incsearch
"行内替换
set gdefault
"编码设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
"语言设置
set helplang=cn
set encoding=utf8 
set langmenu=zh_CN.UTF-8 
set imcmdline 
"source $VIMRUNTIME/delmenu.vim 
"source $VIMRUNTIME/menu.vim
" 设置字体。
set guifont=Liberation\Mono\ 12
"set  guifont=Fixedsys\Excelsior\3.01\ 14
" 我的状态行显示的内容（包括文件类型和解码）
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
" 总是显示状态行
set laststatus=2
" 在编辑过程中，在右下角显示光标位置的状态行
set ruler           
" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=2
" 侦测文件类型
"filetype on
" 载入文件类型插件
"filetype plugin on
" 为特定文件类型载入相关缩进文件
"filetype indent on
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" 字符间插入的像素行数目
set linespace=0
" 增强模式中的命令行自动完成操作
set wildmenu
" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" 允许backspace和光标键跨越行边界
set whichwrap+=<,>,h,l
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
"set mouse=a
set selection=exclusive
set selectmode=mouse,key
" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI
" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=5
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3
" 为C程序提供自动缩进
set smartindent
" 只在下列文件类型被侦测到的时候显示行号，普通文本文件不显示
if has("autocmd")
autocmd FileType xml,html,c,cs,java,perl,shell,bash,cpp,python,vim,php,ruby set number
autocmd FileType xml,html vmap <C-o> <ESC>'<i<!--<ESC>o<ESC>'>o-->
autocmd FileType java,c,cpp,cs vmap <C-o> <ESC>'<o/*<ESC>'>o*/
autocmd FileType html,text,php,vim,c,java,xml,bash,shell,perl,python setlocal textwidth=100
autocmd Filetype html,xml,xsl source $VIMRUNTIME/plugin/closetag.vim
autocmd BufReadPost * 
  \ if line("'\"") > 0 && line("'\"") <= line("$") | 
  \   exe "normal g`\"" |
  \ endif
endif " has("autocmd")
 
" 能够漂亮地显示.NFO文件
set encoding=utf-8
" 高亮显示普通txt文件（需要txt.vim脚本）
"au BufRead,BufNewFile *  setfiletype txt
" 用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" minibufexpl插件的一般设置
"-----------
" 模仿MS Windows中的快捷键 
"-----------
nmap <C-a> ggvG$ 

let g:winManagerWindowLayout='FileExplorer|Taglist'
nmap wm :WMToggle<cr>

filetype plugin indent on
set completeopt=longest,menu










"=================================================================
nmap zwh iwhile<space>()<CR>{<CR><TAB><CR><BS>}<Up><Right><Up><Up><Right><Right><Right>
nmap zfo ifor<space>(;;)<CR>{<CR><TAB><CR><BS>}<Up><Right><Up><Up><Right><Right>
nmap zfi ifor<space>(i=0;i<;i++)<CR>{<CR><TAB><CR><BS>}<Up><Right><Up><Up><Right><Right><Right><Right><Right><Right><Right>
nmap zif iif<space>()<CR>{<CR><TAB><CR><BS>}<Up><Right><Up><Up>
nmap zei ielse if<space>()<CR>{<CR><TAB><CR><BS>}<Up><Right><Up><Up><Right><Right><Right><Right><Right>
nmap zel ielse<CR>{<CR><TAB><CR><BS>}<Up><Right>
nmap zin i#include <
nmap zde i#define
nmap zid i#ifdef<space><CR>#endif<UP><Right>
nmap zma iint main()<CR>{<CR><TAB><CR>}<Up><Right>
nmap zmv iint main(int argc,char *argv[])<CR>{<CR><TAB><CR>}<Up><Right>
nmap zpr iprintf("\n");<Left><Left><Left><Left><Left>
nmap zpyc i#!/usr/bin/python<CR># Filename:<Space>
nmap zcprt i/*<CR>Copyright(c) 2007,CQUPT<CR>All right reserved.<CR><CR>Filename: <CR>Abstract: <CR><CR>Version: <CR>Author: zkheartboy<CR>Start time: <CR>Finish time: <CR>/

"=====================
"
"
"
"
"=====================

let g:winManagerWindowLayout='FileExplorer|TagList'
"nmap wm :WMToggle<CR>
"=============================================
"
" Tlist的内部变量。函数列表。
let Tlist_Use_Right_Window=1
let Tlist_File_Fold_Auto_Close=1

"---------------------------------
" 打开当前目录文件列表
"map <F2> :WMToggle<CR>
" 函数和变量列表
"map <silent> <F3> :Grep<CR>
"----------------------------------

"quit without save
map <F2> :call QuitNoSave()<CR>
func! QuitNoSave()
exec "q!"
endfunc

"quit with save
map <F3> :call QuitSave()<CR>
func! QuitSave()
exec "wq"
endfunc


" GNU C++ Compiler
map <F4> :call CompileRunGplusplus()<CR>
func! CompileRunGplusplus()
exec "w"
exec "!g++ % -g -o %<"
exec "! ./%<"
endfunc
"GNU C Compiler
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
exec "w"
exec "!gcc % -g -o %<"
exec "! ./%<"
endfunc
"GDB
map <F6> :call DebugGplusplus()<CR>
fun! DebugGplusplus()
exec "!gcc % -g -o %<"
exec "! gdb %<"
endfun
" 全能补全
inoremap <F7> <C-n>

"=====================================================================
"
let Tlist_Ctags_Cmd='/usr/bin/ctags'

""""""""""""""""""""""""""
if has("cscope")
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
" add any database in current directory
if filereadable("cscope.out")
cs add cscope.out
" else add database pointed to by environment
elseif $CSCOPE_DB != ""
cs add $CSCOPE_DB
endif
set csverb
set cscopetag
set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-
endif

nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"""""""""""""""""""""""""""""""""""""""""
set nocp
filetype plugin on
filetype indent on
set tags+=/usr/local/share/tags/tags
"au BufWritePost *.c,*.cpp,*.cc,*.h !ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .


""""super tab completion
let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType="<C-X><C-O>"
